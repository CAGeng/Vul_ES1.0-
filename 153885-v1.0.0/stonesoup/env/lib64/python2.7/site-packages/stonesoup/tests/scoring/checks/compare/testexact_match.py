# -----------------------------Copyright-------------------------------------
# NOTICE
#
# This software (or technical data) was produced for the U. S.
# Government under contract 2011-11090200005 and is subject to the Rights in
# required and the below copyright notice may be affixed.
#
# Copyright (c) 2014. All Rights Reserved.
# -----------------------------Copyright--------------------------------------
import sys

from stonesoup.metadata import CheckType, EncodingType
from stonesoup.scoring.checks.compare.exact_match import Exact_Match
from stonesoup.tests.scoring.checks.compare.base import Scoring_Checks_Compare_Base


class Test(Scoring_Checks_Compare_Base):

    """
    tests for Exact Match class
    """

    """
    Retrieves an output check for the Exact Match class
    """
    def get_output_check(self, actual, encoding, value="1234"):
        return Exact_Match(self.metadata, super(Test, self).get_compare_output_check(CheckType.exact_match, actual, encoding, value))

    """
    Class: Exact Match
    Output: standard out
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_exactmatch_stout_string_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stdout_output_type(EncodingType.string),EncodingType.string)

        result = check.score()
        self.assertTrue(result)

    """
    Class: Exact Match
    Output: standard error
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_exactmatch_sterr_string_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stderr_output_type(EncodingType.string),EncodingType.string)


        result = check.score()
        self.assertTrue(result)

    """
    Class: Exact Match
    Output: return code
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_exactmatch_returncode_string_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_returncode_output_type(EncodingType.string),EncodingType.string)

        result = check.score()

        self.assertTrue(result)

#     def test_exactmatch_filename(self):
#         expectedValue = Expected("1234", "STRING", "USE_TEXT")
#         self.set_expected(expectedValue)
#         self.set_check_type(CheckType.exact_match)
#         self.set_file_name_output_type()
#         check = Exact_Match(self._oc)
#         result = check.score()
#         #assert true/false based on what was passed in
#         self.assertTrue(result)

    """
    Class: Exact Match
    Output: file contents
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_exactmatch_filecontents_string_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_contents_output_type(EncodingType.string),EncodingType.string)

        result = check.score()

        self.assertTrue(result)

    """
    Class: Exact Match
    Output: standard out
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_exactmatch_stout_base64_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stdout_output_type(EncodingType.base64),EncodingType.base64)

        result = check.score()

        self.assertTrue(result)

    """
    Class: Exact Match
    Output: standard error
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_exactmatch_sterr_base64_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stderr_output_type(EncodingType.base64),EncodingType.base64)


        result = check.score()

        self.assertTrue(result)

    """
    Class: Exact Match
    Output: return code
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_exactmatch_returncode_base64_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_returncode_output_type(EncodingType.base64),EncodingType.base64)


        result = check.score()

        self.assertTrue(result)

    """
    Class: Exact Match
    Output: file contents
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_exactmatch_filecontents_base64_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_contents_output_type(EncodingType.base64),EncodingType.base64)

        result = check.score()

        self.assertTrue(result)

    """
    Class: Exact Match
    Output: standard out
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_exactmatch_stdout_mismatch_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stdout_output_type(EncodingType.string),EncodingType.base64)

        result = check.score()

        self.assertTrue(result)

    """
    Class: Exact Match
    Output: standard error
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_exactmatch_sterr_mismatch_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stderr_output_type(EncodingType.string),EncodingType.base64)

        result = check.score()

        self.assertTrue(result)

    """
    Class: Exact Match
    Output: return code
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_exactmatch_returncode_mismatch_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_returncode_output_type(EncodingType.string),EncodingType.base64)

        result = check.score()

        self.assertTrue(result)

    """
    Class: Exact Match
    Output: filename
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_exactmatch_filename_mismatch_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_name_output_type(EncodingType.string),EncodingType.base64)


        result = check.score()

        self.assertTrue(result)

    """
    Class: Exact Match
    Output: file contents
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_exactmatch_filecontents_mismatch_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_contents_output_type(EncodingType.string),EncodingType.base64)

        result = check.score()

        self.assertTrue(result)

    """
    Class: Exact Match
    Output: standard out
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: False
    """
    def test_exactmatch_stout_string_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stdout_output_type(EncodingType.string),EncodingType.string, "12")

        result = check.score()
        self.assertFalse(result)

    """
    Class: Exact Match
    Output: standard error
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: False
    """
    def test_exactmatch_sterr_string_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stderr_output_type(EncodingType.string),EncodingType.string, "12")


        result = check.score()
        self.assertFalse(result)

    """
    Class: Exact Match
    Output: return code
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: False
    """
    def test_exactmatch_returncode_string_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_returncode_output_type(EncodingType.string),EncodingType.string, "12")

        result = check.score()

        self.assertFalse(result)

#     def test_exactmatch_filename(self):
#         expectedValue = Expected("1234", "STRING", "USE_TEXT")
#         self.set_expected(expectedValue)
#         self.set_check_type(CheckType.exact_match)
#         self.set_file_name_output_type()
#         check = Exact_Match(self._oc)
#         result = check.score()
#         #assert true/false based on what was passed in
#         self.assertTrue(result)

    """
    Class: Exact Match
    Output: file contents
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: False
    """
    def test_exactmatch_filecontents_string_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_contents_output_type(EncodingType.string),EncodingType.string, "12")

        result = check.score()

        self.assertFalse(result)

    """
    Class: Exact Match
    Output: standard out
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: False
    """
    def test_exactmatch_stout_base64_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stdout_output_type(EncodingType.base64),EncodingType.base64, "12")

        result = check.score()

        self.assertFalse(result)

    """
    Class: Exact Match
    Output: standard error
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: False
    """
    def test_exactmatch_sterr_base64_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stderr_output_type(EncodingType.base64),EncodingType.base64, "12")


        result = check.score()

        self.assertFalse(result)

    """
    Class: Exact Match
    Output: return code
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: False
    """
    def test_exactmatch_returncode_base64_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_returncode_output_type(EncodingType.base64),EncodingType.base64, "12")


        result = check.score()

        self.assertFalse(result)

    """
    Class: Exact Match
    Output: file contents
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: False
    """
    def test_exactmatch_filecontents_base64_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_contents_output_type(EncodingType.base64),EncodingType.base64, "12")

        result = check.score()

        self.assertFalse(result)

    """
    Class: Exact Match
    Output: standard out
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: False
    """
    def test_exactmatch_stdout_mismatch_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stdout_output_type(EncodingType.string),EncodingType.base64, "12")

        result = check.score()

        self.assertFalse(result)

    """
    Class: Exact Match
    Output: standard error
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: False
    """
    def test_exactmatch_sterr_mismatch_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stderr_output_type(EncodingType.string),EncodingType.base64, "12")

        result = check.score()

        self.assertFalse(result)

    """
    Class: Exact Match
    Output: return code
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: False
    """
    def test_exactmatch_returncode_mismatch_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_returncode_output_type(EncodingType.string),EncodingType.base64, "12")

        result = check.score()

        self.assertFalse(result)

    """
    Class: Exact Match
    Output: filename
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: False
    """
    def test_exactmatch_filename_mismatch_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_name_output_type(EncodingType.string),EncodingType.base64, "12")


        result = check.score()

        self.assertFalse(result)

    """
    Class: Exact Match
    Output: file contents
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: False
    """
    def test_exactmatch_filecontents_mismatch_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_contents_output_type(EncodingType.string),EncodingType.base64, "12")

        result = check.score()

        self.assertFalse(result)

    """
    Class: Exact Match
    Output: standard out
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: False
    """
    def test_exactmatch_stout_string_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stdout_output_type(EncodingType.string),EncodingType.string, "5678")

        result = check.score()
        self.assertFalse(result)

    """
    Class: Exact Match
    Output: standard error
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: False
    """
    def test_exactmatch_sterr_string_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stderr_output_type(EncodingType.string),EncodingType.string, "5678")


        result = check.score()
        self.assertFalse(result)

    """
    Class: Exact Match
    Output: return code
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: False
    """
    def test_exactmatch_returncode_string_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_returncode_output_type(EncodingType.string),EncodingType.string, "5678")

        result = check.score()

        self.assertFalse(result)

#     def test_exactmatch_filename(self):
#         expectedValue = Expected("1234", "STRING", "USE_TEXT")
#         self.set_expected(expectedValue)
#         self.set_check_type(CheckType.exact_match)
#         self.set_file_name_output_type()
#         check = Exact_Match(self._oc)
#         result = check.score()
#         #assert true/false based on what was passed in
#         self.assertTrue(result)

    """
    Class: Exact Match
    Output: file contents
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: False
    """
    def test_exactmatch_filecontents_string_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_contents_output_type(EncodingType.string),EncodingType.string, "5678")

        result = check.score()

        self.assertFalse(result)

    """
    Class: Exact Match
    Output: standard out
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: False
    """
    def test_exactmatch_stout_base64_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stdout_output_type(EncodingType.base64),EncodingType.base64, "5678")

        result = check.score()

        self.assertFalse(result)

    """
    Class: Exact Match
    Output: standard error
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: False
    """
    def test_exactmatch_sterr_base64_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stderr_output_type(EncodingType.base64),EncodingType.base64, "5678")


        result = check.score()

        self.assertFalse(result)

    """
    Class: Exact Match
    Output: return code
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: False
    """
    def test_exactmatch_returncode_base64_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_returncode_output_type(EncodingType.base64),EncodingType.base64, "5678")


        result = check.score()

        self.assertFalse(result)

    """
    Class: Exact Match
    Output: file contents
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: False
    """
    def test_exactmatch_filecontents_base64_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_contents_output_type(EncodingType.base64),EncodingType.base64, "5678")

        result = check.score()

        self.assertFalse(result)

    """
    Class: Exact Match
    Output: standard out
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: False
    """
    def test_exactmatch_stdout_mismatch_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stdout_output_type(EncodingType.string),EncodingType.base64, "5678")

        result = check.score()

        self.assertFalse(result)

    """
    Class: Exact Match
    Output: standard error
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: False
    """
    def test_exactmatch_sterr_mismatch_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stderr_output_type(EncodingType.string),EncodingType.base64, "5678")

        result = check.score()

        self.assertFalse(result)

    """
    Class: Exact Match
    Output: return code
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: False
    """
    def test_exactmatch_returncode_mismatch_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_returncode_output_type(EncodingType.string),EncodingType.base64, "5678")

        result = check.score()

        self.assertFalse(result)

    """
    Class: Exact Match
    Output: filename
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: False
    """
    def test_exactmatch_filename_mismatch_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_name_output_type(EncodingType.string),EncodingType.base64, "5678")


        result = check.score()

        self.assertFalse(result)

    """
    Class: Exact Match
    Output: file contents
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: False
    """
    def test_exactmatch_filecontents_mismatch_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_contents_output_type(EncodingType.string),EncodingType.base64, "5678")

        result = check.score()

        self.assertFalse(result)

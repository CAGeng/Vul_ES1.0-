# -----------------------------Copyright-------------------------------------
# NOTICE
#
# This software (or technical data) was produced for the U. S.
# Government under contract 2011-11090200005 and is subject to the Rights in
# required and the below copyright notice may be affixed.
#
# Copyright (c) 2014. All Rights Reserved.
# -----------------------------Copyright--------------------------------------
import sys
from stonesoup.metadata import CheckType, EncodingType
from stonesoup.scoring.checks.compare.contains import Contains
from stonesoup.tests.scoring.checks.compare.base import Scoring_Checks_Compare_Base


class Test(Scoring_Checks_Compare_Base):

    """
    tests for Contains class
    """

    """
    Retrieves an output check for the Contains class
    """
    def get_output_check(self, actual, encoding, value="1234"):
        return Contains(self.metadata, super(Test, self).get_compare_output_check(CheckType.contains, actual, encoding, value))

    """
    Output: standard out
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_stdout_string_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stdout_output_type(EncodingType.string), EncodingType.string)

        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: standard error
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_sterr_string_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stderr_output_type(EncodingType.string), EncodingType.string)

        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: return code
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_returncode_string_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_returncode_output_type(EncodingType.string), EncodingType.string)


        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: filename
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_filename_string_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_name_output_type(EncodingType.string), EncodingType.string)


        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: file contents
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_filecontents_string_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_contents_output_type(EncodingType.string), EncodingType.string)

        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: standard out
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_stdout_base64_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stdout_output_type(EncodingType.base64), EncodingType.base64)

        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: standard error
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_sterr_base64_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stderr_output_type(EncodingType.base64), EncodingType.base64)

        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: return code
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_returncode_base64_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_returncode_output_type(EncodingType.base64), EncodingType.base64)

        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: filename
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_filename_base64_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_name_output_type(EncodingType.base64), EncodingType.base64)


        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: file contents
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_filecontents_base64_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_contents_output_type(EncodingType.base64), EncodingType.base64)

        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: standard out
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_stdout_mismatch_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stdout_output_type(EncodingType.string), EncodingType.base64)

        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: standard error
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_sterr_mismatch_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stderr_output_type(EncodingType.string), EncodingType.base64)

        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: return code
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_returncode_mismatch_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_returncode_output_type(EncodingType.string), EncodingType.base64)


        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: filename
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_filename_mismatch_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_name_output_type(EncodingType.string), EncodingType.base64)


        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: file contents
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: default (1234)

    Expected test outcome: True
    """
    def test_filecontents_mismatch_strmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_contents_output_type(EncodingType.string), EncodingType.base64)

        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: standard out
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: True
    """
    def test_stdout_string_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stdout_output_type(EncodingType.string), EncodingType.string, "12")

        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: standard error
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: True
    """
    def test_sterr_string_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stderr_output_type(EncodingType.string), EncodingType.string, "12")

        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: return code
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: True
    """
    def test_returncode_string_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_returncode_output_type(EncodingType.string), EncodingType.string, "12")


        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: filename
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: True
    """
    def test_filename_string_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_name_output_type(EncodingType.string), EncodingType.string, "12")


        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: file contents
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: True
    """
    def test_filecontents_string_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_contents_output_type(EncodingType.string), EncodingType.string, "12")

        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: standard out
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: True
    """
    def test_stdout_base64_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stdout_output_type(EncodingType.base64), EncodingType.base64, "12")

        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: standard error
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: True
    """
    def test_sterr_base64_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stderr_output_type(EncodingType.base64), EncodingType.base64, "12")

        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: return code
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: True
    """
    def test_returncode_base64_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_returncode_output_type(EncodingType.base64), EncodingType.base64, "12")

        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: filename
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: True
    """
    def test_filename_base64_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_name_output_type(EncodingType.base64), EncodingType.base64, "12")


        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: file contents
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: True
    """
    def test_filecontents_base64_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_contents_output_type(EncodingType.base64), EncodingType.base64, "12")

        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: standard out
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: True
    """
    def test_stdout_mismatch_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stdout_output_type(EncodingType.string), EncodingType.base64, "12")

        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: standard error
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: True
    """
    def test_sterr_mismatch_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stderr_output_type(EncodingType.string), EncodingType.base64, "12")

        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: return code
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: True
    """
    def test_returncode_mismatch_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_returncode_output_type(EncodingType.string), EncodingType.base64, "12")


        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: filename
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: True
    """
    def test_filename_mismatch_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_name_output_type(EncodingType.string), EncodingType.base64, "12")


        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: file contents
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 12

    Expected test outcome: True
    """
    def test_filecontents_mismatch_substring(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_contents_output_type(EncodingType.string), EncodingType.base64, "12")

        result = check.score()
        # assert true/false based on what was passed in
        self.assertTrue(result)

    """

    Output: standard out
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: false
    """
    def test_stdout_string_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stdout_output_type(EncodingType.string), EncodingType.string, "5678")

        result = check.score()
        # assert true/false based on what was passed in
        self.assertFalse(result)

    """

    Output: standard error
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: false
    """
    def test_sterr_string_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stderr_output_type(EncodingType.string), EncodingType.string, "5678")

        result = check.score()
        # assert true/false based on what was passed in
        self.assertFalse(result)

    """

    Output: return code
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: false
    """
    def test_returncode_string_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_returncode_output_type(EncodingType.string), EncodingType.string, "5678")


        result = check.score()
        # assert true/false based on what was passed in
        self.assertFalse(result)

    """

    Output: filename
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: false
    """
    def test_filename_string_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_name_output_type(EncodingType.string), EncodingType.string, "5678")


        result = check.score()
        # assert true/false based on what was passed in
        self.assertFalse(result)

    """

    Output: file contents
    Encoding actual: string
    Encoding expected: string
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: false
    """
    def test_filecontents_string_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_contents_output_type(EncodingType.string), EncodingType.string, "5678")

        result = check.score()
        # assert true/false based on what was passed in
        self.assertFalse(result)

    """

    Output: standard out
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: false
    """
    def test_stdout_base64_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stdout_output_type(EncodingType.base64), EncodingType.base64, "5678")

        result = check.score()
        # assert true/false based on what was passed in
        self.assertFalse(result)

    """

    Output: standard error
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: false
    """
    def test_sterr_base64_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stderr_output_type(EncodingType.base64), EncodingType.base64, "5678")

        result = check.score()
        # assert true/false based on what was passed in
        self.assertFalse(result)

    """

    Output: return code
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: false
    """
    def test_returncode_base64_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_returncode_output_type(EncodingType.base64), EncodingType.base64, "5678")

        result = check.score()
        # assert true/false based on what was passed in
        self.assertFalse(result)

    """

    Output: filename
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: false
    """
    def test_filename_base64_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_name_output_type(EncodingType.base64), EncodingType.base64, "5678")


        result = check.score()
        # assert true/false based on what was passed in
        self.assertFalse(result)

    """

    Output: file contents
    Encoding actual: base 64
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: false
    """
    def test_filecontents_base64_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_contents_output_type(EncodingType.base64), EncodingType.base64, "5678")

        result = check.score()
        # assert true/false based on what was passed in
        self.assertFalse(result)

    """

    Output: standard out
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: false
    """
    def test_stdout_mismatch_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stdout_output_type(EncodingType.string), EncodingType.base64, "5678")

        result = check.score()
        # assert true/false based on what was passed in
        self.assertFalse(result)

    """

    Output: standard error
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: false
    """
    def test_sterr_mismatch_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_stderr_output_type(EncodingType.string), EncodingType.base64, "5678")

        result = check.score()
        # assert true/false based on what was passed in
        self.assertFalse(result)

    """

    Output: return code
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: false
    """
    def test_returncode_mismatch_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_returncode_output_type(EncodingType.string), EncodingType.base64, "5678")


        result = check.score()
        # assert true/false based on what was passed in
        self.assertFalse(result)

    """

    Output: filename
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: false
    """
    def test_filename_mismatch_nostrmatch(self):
        print >> sys.stderr, sys._getframe().f_code.co_name
        check = self.get_output_check(self.get_file_name_output_type(EncodingType.string), EncodingType.base64, "5678")


        result = check.score()
        # assert true/false based on what was passed in
        self.assertFalse(result)

    """

    Output: file content
    Encoding actual: string
    Encoding expected: base 64
    Value actual: default (1234)
    Value expected: 5678

    Expected test outcome: false
    """
    def test_filecontents_mismatch_nostrmatch(self):
            print >> sys.stderr, sys._getframe().f_code.co_name
            check = self.get_output_check(self.get_file_contents_output_type(EncodingType.string), EncodingType.base64, "5678")

            result = check.score()
            # assert true/false based on what was passed in
            self.assertFalse(result)

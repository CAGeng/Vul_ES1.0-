#!/usr/bin/env python2.7
# -----------------------------Copyright-------------------------------------
# NOTICE
#
# This software (or technical data) was produced for the U. S.
# Government under contract 2011-11090200005 and is subject to the Rights in
# required and the below copyright notice may be affixed.
#
# Copyright (c) 2014. All Rights Reserved.
# -----------------------------Copyright--------------------------------------
import os
import sys
import unittest
from os.path import dirname as dirname

from stonesoup.configuration import configuration
from stonesoup.utils import Workspace, WorkspaceType
from stonesoup.scoring.scorer import Scorer
from stonesoup.tests.resources import archives


class TestScorer(unittest.TestCase):

    def setUp(self):
        """Define paths, cleanup previous test, and create workspace.
        Args:
            None.
        Returns:
            None.
        Raises:
            None.
        """
        self.result = os.path.join(os.path.abspath(os.sep), 'opt', 'stonesoup', 'result')
        if os.path.exists(self.result):
            os.remove(self.result)

        # From a run of test_texas_cli:TestTexasClient.test_execute_scoring modified to run all three iopairs
        files = os.listdir(dirname(archives.__file__))
        for file in files:
            if file == 'J-TREE-GOOD-03_result_20140722-144340.tar.gz':
                execute_analyzed = os.path.join(dirname(archives.__file__), file)
                break

        testconf = os.path.join(dirname(configuration.__file__), 'sample.conf')
        configuration.create(testconf)
        Workspace.initialize(archive=execute_analyzed, type=WorkspaceType.scoring)
        Workspace.create()
        self.metadata = Workspace.load_metadata()

    def tearDown(self):
        """Remove all test artifacts.
        Args:
            None.
        Returns:
            None.
        Raises:
            None.
        """
        Workspace.destroy()
        os.rmdir(Workspace.get_path())
        if os.path.exists(self.result):
            os.remove(self.result)

    def test_score_run(self):
        """Score the default iopair.
        Functionality tested:   That a result file is written.
        That the result file contains entries for scoring and checks as expected from the metadata.
        """
        # The last iopair run was J-TREE-GOOD-03, so that is scored by default.
        print >> sys.stderr, sys._getframe().f_code.co_name
        scorer = Scorer()
        result = scorer.run(metadata=self.metadata)
        result.export_results(self.result)
        # Check that result file is written.
        self.assertTrue(os.path.exists(self.result))
        with open(self.result, 'r') as f: score_output = f.read()
        # Check the iopairs
        self.assertTrue(score_output.find('J-TREE-GOOD-01') == -1)
        self.assertTrue(score_output.find('J-TREE-GOOD-02') == -1)
        self.assertTrue(score_output.find('J-TREE-GOOD-03') > -1)
        # Check the scoring checks
        self.assertTrue(score_output.find('GOOD-03-1') > -1)
        self.assertTrue(score_output.find('GOOD-03-2') > -1)
        self.assertTrue(score_output.find('GOOD-03-3') > -1)
        self.assertTrue(score_output.find('GOOD-03-4') > -1)
        self.assertTrue(score_output.find('GOOD-03-5') > -1)
        self.assertTrue(score_output.find('GOOD-03-6') > -1)
        self.assertTrue(score_output.find('GOOD-03-7') > -1)
        # Check that multiple formulas were done
        self.assertTrue(score_output.find('GOOD-03-Default') > -1)
        self.assertTrue(score_output.find('GOOD-03-formula') > -1)

    def test_score_raise_nometa(self):
        """Test that calling score with no metadata raises an exception."""
        print >> sys.stderr, sys._getframe().f_code.co_name
        scorer = Scorer()
        with self.assertRaises(AttributeError) as cm:
            scorer.run(metadata=None)
        msg = 'io_pairs'
        self.assertTrue(cm.exception.message.find(msg) > -1)

    def test_score_iopair1(self):
        """Score the first iopair.
        Functionality tested:   That a result file is written.
        That the result file contains iopair entries as expected from the metadata.
        """
        print >> sys.stderr, sys._getframe().f_code.co_name
        # Three iopairs were run. The default scores the last, so specify the first instead.
        scorer = Scorer()
        result = scorer.run(metadata=self.metadata, iopair=self.metadata.io_pairs[0])
        result.export_results(self.result)
        # Check that result file is written.
        self.assertTrue(os.path.exists(self.result))
        with open(self.result, 'r') as f: score_output = f.read()
        # Check the iopairs
        self.assertTrue(score_output.find('J-TREE-GOOD-01') > -1)
        self.assertTrue(score_output.find('J-TREE-GOOD-02') == -1)
        self.assertTrue(score_output.find('J-TREE-GOOD-03') == -1)

    def test_score_multi_iopair2(self):
        """Score the second iopair.
        Functionality tested: Coverage of formula and check options.
        """
        # Check various formula and scoring definitions
        print >> sys.stderr, sys._getframe().f_code.co_name
        scorer = Scorer()
        result = scorer.run(metadata=self.metadata, iopair=self.metadata.io_pairs[1])
        result.export_results(self.result)
        # Check that result file is written.
        self.assertTrue(os.path.exists(self.result))
        with open(self.result, 'r') as f: score_output = f.read()
        # Check the iopairs
        self.assertTrue(score_output.find('J-TREE-GOOD-01') == -1)
        self.assertTrue(score_output.find('J-TREE-GOOD-02') > -1)
        self.assertTrue(score_output.find('J-TREE-GOOD-03') == -1)
        # Check the scoring checks
        self.assertTrue(score_output.find('GOOD-02-1,CONTAINS,True') > -1)
        self.assertTrue(score_output.find('GOOD-02-2,CONTAINS,True') > -1)
        self.assertTrue(score_output.find('GOOD-02-3,CONTAINS,True') > -1)
        self.assertTrue(score_output.find('GOOD-02-4,EXACT_MATCH,True') > -1)
        self.assertTrue(score_output.find('GOOD-02-5,REGEX,True') > -1)
        self.assertTrue(score_output.find('GOOD-02-6,REGEX,True') > -1)
        self.assertTrue(score_output.find('GOOD-02-7,CONTAINS,False') > -1)
        self.assertTrue(score_output.find('GOOD-02-8,EXACT_MATCH,False') > -1)
        self.assertTrue(score_output.find('GOOD-02-9,REGEX,False') > -1)
        self.assertTrue(score_output.find('GOOD-02-10,CONTAINS,True') > -1)
        self.assertTrue(score_output.find('GOOD-02-11,CONTAINS,True') > -1)
        self.assertTrue(score_output.find('GOOD-02-12,EXACT_MATCH,True') > -1)
        self.assertTrue(score_output.find('GOOD-02-13,EXACT_MATCH,True') > -1)
        self.assertTrue(score_output.find('GOOD-02-14,CONTAINS,True') > -1)
        self.assertTrue(score_output.find('GOOD-02-15,CONTAINS,True') > -1)
        self.assertTrue(score_output.find('GOOD-02-16,EXISTS,True') > -1)
        self.assertTrue(score_output.find('GOOD-02-17,SCRIPT,True') > -1)
        self.assertTrue(score_output.find('GOOD-02-18,SPECIAL,False') > -1)
        self.assertTrue(score_output.find('GOOD-02-19,EXISTS,True') > -1)
        self.assertTrue(score_output.find('GOOD-02-20,SCRIPT,True') > -1)
        # Check the formulas
        self.assertTrue(score_output.find('GOOD-02-Default,GOOD-02-1,True') > -1)
        self.assertTrue(score_output.find('GOOD-02-formula,GOOD-02-2,True') > -1)
        self.assertTrue(score_output.find('GOOD-02-And,GOOD-02-1 AND GOOD-02-8,False') > -1)

    def test_score_regex(self):
        """Score the an iopair that uses regular expression checks.
        Functionality tested:  Regular expressions in checks, and booleans in formulas.
        """
        # The last iopair run was J-TREE-GOOD-03, so that is scored by default.
        print >> sys.stderr, sys._getframe().f_code.co_name
        scorer = Scorer()
        result = scorer.run(metadata=self.metadata)
        result.export_results(self.result)
        # Check that result file is written.
        self.assertTrue(os.path.exists(self.result))
        with open(self.result, 'r') as f: score_output = f.read()
        # Check the iopairs
        self.assertTrue(score_output.find('J-TREE-GOOD-01') == -1)
        self.assertTrue(score_output.find('J-TREE-GOOD-02') == -1)
        self.assertTrue(score_output.find('J-TREE-GOOD-03') > -1)
        # Check the scoring checks
        self.assertTrue(score_output.find('GOOD-03-1,REGEX,True') > -1)
        self.assertTrue(score_output.find('GOOD-03-2,REGEX,True') > -1)
        self.assertTrue(score_output.find('GOOD-03-3,REGEX,True') > -1)
        self.assertTrue(score_output.find('GOOD-03-4,REGEX,True') > -1)
        self.assertTrue(score_output.find('GOOD-03-5,REGEX,True') > -1)
        self.assertTrue(score_output.find('GOOD-03-6,REGEX,True') > -1)
        self.assertTrue(score_output.find('GOOD-03-7,CONTAINS,True') > -1)
        # Check the formulas
        self.assertTrue(score_output.find('GOOD-03-Default,GOOD-03-7,True') > -1)
        self.assertTrue(score_output.find('GOOD-03-formula,GOOD-03-1 AND GOOD-03-2 AND GOOD-03-3 AND GOOD-03-4 AND GOOD-03-5 AND GOOD-03-6,True') > -1)


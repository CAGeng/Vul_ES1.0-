# ------------------------------Copyright-------------------------------------
# NOTICE
# 
# This software (or technical data) was produced for the U. S.
# Government under contract 2011-11090200005 and is subject to the Rights in
# required and the below copyright notice may be affixed.
# 
# Copyright (c) 2013 Ponte Technologies. All Rights Reserved.
# -----------------------------Copyright--------------------------------------

from __future__ import print_function

try :
    import queue #python 3+
except ImportError :
    import Queue as queue #python 2.x
    
try :
    import cStringIO as StringIO #this is faster
except ImportError :
    import StringIO
    
import os
import threading
import socket
import datetime

from lxml import etree
import pytz

class XmlLogger(threading.Thread) :
    
    _instance = None
    
    @classmethod
    def instance(cls):
        return cls._instance
    
    def __init__(self, log_file=None) :
        threading.Thread.__init__(self)
        self.__message_queue = queue.Queue()
        
        if log_file is None :
            self.__log_file = os.path.join(os.getcwd(), 'messages.xml')
        else :
            self.__log_file = log_file
        
        if os.path.exists(self.__log_file) :
            try :
                os.remove(self.__log_file)
            except OSError :
                print('Failed to remove old log file "{0}".'.format(self.__log_file))
                raise
        
        
        #etree.register_namespace('comms', 'urn:stonesoup:api:communications')
    
    @property
    def message_queue(self) :
        return self.__message_queue
        
    @property
    def log_file(self) :
        return self.__log_file
        
    def run(self) :
        with open(self.__log_file, mode='w') as outstream :
            with etree.xmlfile(outstream, encoding='utf-8') as xmlfile :
                # this is the start of the document, make it valid XML 
                # with a declaration line
                xmlfile.write_declaration()
                
                hostname = socket.gethostname()
                create_timestamp = datetime.datetime.now(pytz.timezone('US/Eastern')).isoformat()
                
                with xmlfile.element('messages', 
                        attrib=dict(hostname=hostname, created=create_timestamp),
                        nsmap={ None: 'urn:stonesoup:api:communications' }) :
                    while True :
                        message = self.__message_queue.get()
                        
                        # stop on None (end of queue)
                        if message is None :
                            self.__message_queue.task_done()
                            break
                        
                        # to avoid writing random namespaces since we are streaming 
                        # the data to an XML file rather than building an entire 
                        # etree in memory, we need to serialize from generateDS to 
                        # a string and then back to an etree.  This is proper horrible.
                        buffer = StringIO.StringIO()
                        message.export(buffer, 0, name_='message', pretty_print=False)
                        
                        # get an etree.Element instance
                        message_element = etree.fromstring(buffer.getvalue())
                        
                        # free up the buffer right away
                        buffer.close()
                        buffer = None
                        
                        # write the Element to the stream
                        xmlfile.write(message_element)
                        
                        # cleanup the remainder
                        message_element = None
                        message = None
                        
                        # always signal task done, so the queue count reduces
                        self.__message_queue.task_done()
                        
                    # end queue loop
                # end messages element
            # end XML file
        # end file stream

#!/usr/bin/env python2.7
# -----------------------------Copyright-------------------------------------
# NOTICE
#
# This software (or technical data) was produced for the U. S.
# Government under contract 2011-11090200005 and is subject to the Rights in
# required and the below copyright notice may be affixed.
#
# Copyright (c) 2014. All Rights Reserved.
# -----------------------------Copyright--------------------------------------
import os
import threading
from datetime import datetime, timedelta
from time import sleep
import sys
from progressbar import AnimatedMarker,\
    ProgressBar, \
    Timer



class AnalyzeTimer(threading.Thread):
    """
    Handle Time out Kills for IO pairs
        Attributes:
            timeout: timeout value in seconds as int()
    """
    def __init__(self, **kwargs):
        threading.Thread.__init__(self)
        self.fd = kwargs.pop('timer_fd', None)
        # prevent zombie
        self.daemon = True
        self._stop = threading.Event()
        # Takes signal to stop the execution group thread.
        self._stopping = threading.Event()


    def run(self):
        """
        Execute the timeout watcher
        Returns:
            None
        """

        self._stop.clear()

        widgets = ['Analyzing: ', AnimatedMarker(),
               ' ', Timer()]
        pbar = ProgressBar(widgets=widgets, fd=self.fd).start()
        while not self._stop.isSet():
            sleep(1)
            pbar.update()

        pbar.finish()


    def stop(self):
        """
        Support smooth termination
        Returns:
            None
        """
        self._stop.set()



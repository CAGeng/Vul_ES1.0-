# -----------------------------Copyright-------------------------------------
# NOTICE
#
# This software (or technical data) was produced for the U. S.
# Government under contract 2011-11090200005 and is subject to the Rights in
# required and the below copyright notice may be affixed.
#
# Copyright (c) 2014. All Rights Reserved.
# -----------------------------Copyright--------------------------------------

from flufl.enum import Enum

# This is auto generated code to wrap the PyXB compiled XSD enumerations
# into a more usable form: Enums.  This was generated with the following
# command:
#     >>> ./stonesoup/metadata/xml/enumDump.py -m stonesoup.metadata.xml.v1_0_0a -s /home/gmacgill/texas -o stonesoup/metadata/enums.py


class ArchitectureType(Enum) :
    any = 'ANY'
    x86 = 'x86'
    x86_64 = 'x86_64'

class SimpleCheckType(Enum) :
    script = 'SCRIPT'
    exists = 'EXISTS'
    special = 'SPECIAL'

class CompareCheckType(Enum) :
    exact_match = 'EXACT_MATCH'
    contains = 'CONTAINS'
    regex = 'REGEX'

class CheckType(SimpleCheckType, CompareCheckType) :
    pass

class ControlFlowType(Enum) :
    callback = 'CALLBACK'
    indirectly_recursive = 'INDIRECTLY_RECURSIVE'
    infinite_loop = 'INFINITE_LOOP'
    interclass_1 = 'INTERCLASS_1'
    interclass_2 = 'INTERCLASS_2'
    interclass_10 = 'INTERCLASS_10'
    interclass_50 = 'INTERCLASS_50'
    interfile_1 = 'INTERFILE_1'
    interfile_2 = 'INTERFILE_2'
    interfile_10 = 'INTERFILE_10'
    interfile_50 = 'INTERFILE_50'
    interprocedural_1 = 'INTERPROCEDURAL_1'
    interprocedural_2 = 'INTERPROCEDURAL_2'
    interprocedural_10 = 'INTERPROCEDURAL_10'
    interprocedural_50 = 'INTERPROCEDURAL_50'
    interrupt = 'INTERRUPT'
    interrupt_continue = 'INTERRUPT_CONTINUE'
    pointer_to_function = 'POINTER_TO_FUNCTION'
    recursive = 'RECURSIVE'
    sequence = 'SEQUENCE'
    at_exit = 'AT_EXIT'
    macros = 'MACROS'
    set_jump_long_jump = 'SET_JUMP_LONG_JUMP'
    unconditional_jump = 'UNCONDITIONAL_JUMP'
    break_with_label = 'BREAK_WITH_LABEL'
    function_invocation_overload = 'FUNCTION_INVOCATION_OVERLOAD'


class DataFlowType(Enum) :
    address_alias_1 = 'ADDRESS_ALIAS_1'
    address_alias_2 = 'ADDRESS_ALIAS_2'
    address_alias_10 = 'ADDRESS_ALIAS_10'
    address_alias_50 = 'ADDRESS_ALIAS_50'
    address_as_constant = 'ADDRESS_AS_CONSTANT'
    address_as_function_return_value = 'ADDRESS_AS_FUNCTION_RETURN_VALUE'
    index_alias_1 = 'INDEX_ALIAS_1'
    index_alias_2 = 'INDEX_ALIAS_2'
    index_alias_10 = 'INDEX_ALIAS_10'
    index_alias_50 = 'INDEX_ALIAS_50'
    basic = 'BASIC'
    var_arg_list = 'VAR_ARG_LIST'
    address_as_linear_expression = 'ADDRESS_AS_LINEAR_EXPRESSION'
    address_as_nonlinear_expression = 'ADDRESS_AS_NONLINEAR_EXPRESSION'
    address_as_variable = 'ADDRESS_AS_VARIABLE'
    buffer_address_array_index = 'BUFFER_ADDRESS_ARRAY_INDEX'
    buffer_address_pointer = 'BUFFER_ADDRESS_POINTER'
    java_generics = 'JAVA_GENERICS'


class DataType(Enum) :
    array = 'ARRAY'
    simple = 'SIMPLE'
    void_pointer = 'VOID_POINTER'
    heap_pointer = 'HEAP_POINTER'
    struct = 'STRUCT'
    typedef = 'TYPEDEF'
    union = 'UNION'


class DatabaseType(Enum) :
    mssql = 'MSSQL'
    mysql = 'MYSQL'
    postgresql = 'POSTGRESQL'


class EncodingType(Enum) :
    string = 'STRING'
    base64 = 'BASE64'


class ExecutionSchemeType(Enum) :
    sequence = 'SEQUENCE'
    parallel = 'PARALLEL'


class GenerationMethodType(Enum) :
    fault_injected = 'FAULT_INJECTED'
    real_world = 'REAL_WORLD'
    engineered = 'ENGINEERED'


class IOPairCategoryType(Enum) :
    good = 'GOOD'
    bad = 'BAD'


class LanguageType(Enum) :
    c = 'C'
    cxx = 'C++'
    java = 'JAVA'


class OperatingSystemType(Enum) :
    all = 'ALL'
    linux = 'LINUX'
    windows = 'WINDOWS'
    osx = 'OSX'
    android = 'ANDROID'
    ios = 'IOS'


class OutputType(Enum) :
    standard_out = 'STANDARD_OUT'
    standard_error = 'STANDARD_ERROR'
    file_contents = 'FILE_CONTENTS'
    file_name = 'FILE_NAME'
    return_code = 'RETURN_CODE'
    special = 'SPECIAL'


class ResetType(Enum) :
    none = 'NONE'
    reboot = 'REBOOT'
    reprovision = 'REPROVISION'


class ResourceLimitType(Enum) :
    rlimit_as = 'RLIMIT_AS'
    rlimit_nofile = 'RLIMIT_NOFILE'
    rlimit_noproc = 'RLIMIT_NOPROC'
    rlimit_cpu = 'RLIMIT_CPU'


class TaintSourceType(Enum) :
    environment_variable = 'ENVIRONMENT_VARIABLE'
    file_contents = 'FILE_CONTENTS'
    shared_memory = 'SHARED_MEMORY'
    socket = 'SOCKET'


class TechnicalImpactType(Enum) :
    none = 'NONE'
    unspecified = 'UNSPECIFIED'
    read_file = 'READ_FILE'
    read_application_data = 'READ_APPLICATION_DATA'
    gain_privileges = 'GAIN_PRIVILEGES'
    hide_activities = 'HIDE_ACTIVITIES'
    execute_unauthorized_code = 'EXECUTE_UNAUTHORIZED_CODE'
    modify_files = 'MODIFY_FILES'
    modify_application_data = 'MODIFY_APPLICATION_DATA'
    bypass_protection_mechanism = 'BYPASS_PROTECTION_MECHANISM'
    alter_execution_logic = 'ALTER_EXECUTION_LOGIC'
    unexpected_state = 'UNEXPECTED_STATE'
    dos_uncontrolled_exit = 'DOS_UNCONTROLLED_EXIT'
    dos_amplification = 'DOS_AMPLIFICATION'
    dos_instability = 'DOS_INSTABILITY'
    dos_blocking = 'DOS_BLOCKING'
    dos_resource_consumption = 'DOS_RESOURCE_CONSUMPTION'


class TestCaseType(Enum) :
    all = 'ALL'
    binary = 'BINARY'
    source = 'SOURCE'


class ValueType(Enum) :
    use_text = 'USE_TEXT'
    use_file_contents = 'USE_FILE_CONTENTS'


__all__ = [ 'ArchitectureType',
    'CheckType',
    'SimpleCheckType',
    'CompareCheckType',
    'ControlFlowType',
    'DataFlowType',
    'DataType',
    'DatabaseType',
    'EncodingType',
    'ExecutionSchemeType',
    'GenerationMethodType',
    'IOPairCategoryType',
    'LanguageType',
    'OperatingSystemType',
    'OutputType',
    'ResetType',
    'ResourceLimitType',
    'TaintSourceType',
    'TechnicalImpactType',
    'TestCaseType',
    'ValueType' ]

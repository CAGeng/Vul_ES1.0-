#!/usr/bin/env python2.7
# -----------------------------Copyright-------------------------------------
# NOTICE
#
# This software (or technical data) was produced for the U. S.
# Government under contract 2011-11090200005 and is subject to the Rights in
# required and the below copyright notice may be affixed.
#
# Copyright (c) 2014. All Rights Reserved.
# -----------------------------Copyright--------------------------------------
import os
from os.path import dirname
from stonesoup.metadata import ValueType, EncodingType
from stonesoup.utils.command import BaseCommand
from stonesoup.utils import texaslogging
from stonesoup.scoring.checks.simple.base import Base_Simple_Operation
from stonesoup.utils import Workspace

class Script(Base_Simple_Operation):

    def __init__(self, metadata, check):
        super(Script, self).__init__(metadata, check)


    def score(self):
        logs=Workspace.get_logs()
        log_dir = Workspace.get_log_dir()
        cwd = Workspace.make_rel_path_abs(self._metadata.structure.iodata)
        envvars = Workspace.get_envvars(self._metadata)
        envvars.update(Workspace.get_log_envvars(logs=logs))

        if not os.path.exists(cwd):
            os.makedirs(cwd)

        value = self._value
        if self._handling == ValueType.use_text:
            value = self.get_string_as_string(value, EncodingType.string)
        else:
            if value is not None and not os.path.isabs(value):
                value = Workspace.make_rel_path_abs(os.path.join(self._metadata.structure.iodata, value))
            if os.path.exists(value):
                value = self.get_file_as_string(value, EncodingType.string)

        kwargs = {'name' : self.name,
                  'command' : value,
                  'cwd' : cwd,\
                  'envvars' : envvars,\
                  'log_dir' : log_dir}
        sp = ScriptCheckProcess(**kwargs)
        sp.start()

        success = sp.get_return_code() == 0

        logs.update(sp.get_log_dict())
        Workspace.set_logs(logs)

        return success





class ScriptIOException(Exception):
    """
    Script Input Error Execption for bad inputs
    """
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return repr(self.value)


class ScriptExecException(Exception):
    """
    Script Access Exception
    Use when execution fails
    """
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return repr(self.value)


class ScriptCheckProcess(BaseCommand):
    """
    Runs a script command.

    Attributes:
        cmd: command string
        cwd: passed to BaseCommand as the directory to execute from
        evnvars: environment variables
    """

    def __init__(self, **kwargs):
        self._command = kwargs.pop('command')
        self._name = kwargs.pop('name')
        texaslogging.info("Started Script Check Process")
        super(ScriptCheckProcess, self).__init__(id=self._name,**kwargs)



    def __str__(self):
        my_parms = self._cwd, self._envvars, self._log_dir
        my_parms = my_parms, self.stage, self.type, self.handling, \
                   self.encoding, self.id
        return str.replace(str(my_parms), "\'", '\"')

    def __eq__(self, obj):
        """
        Allow instance to check its self
        Args:
            obj: instance of object you want to check

        Return:
            Returns Boolean
        """
        yup = type(obj) is ScriptCheckProcess
        yup &= str(self) == str(obj)
        return yup

    @staticmethod
    def from_file(file_name):
        """
        Open a file and extract the contents for execution

        Args:
            file_name: full path with file name you wish to open

        Returns:
            Returns data read from file as a list
        """
        if os.path.exists(file_name) is False:
            raise ScriptIOException("{}, is not able to be opened for reading")
        with open(file_name, 'r') as f:
            data = f.read()
        return data.strip('\n').strip('\r')

    def _get_log_file_prefix(self):
        """
        Return prefix for used in logfile name generation
        Return:
            Returns a string object
        """
        return self._name

    def _command_args(self):
        """
        Generage command_args for use in subprocess
        This can be overloaded by other classes
        Returns:
            Returns cmd_args as a dict to be used as kwargs
        """

        cmd_args = super(ScriptCheckProcess, self)._command_args()
        cmd_args['executable'] = '/bin/bash'
        cmd_args['shell'] = True

        return cmd_args

    def _get_command(self):
        """
        Construct a script command to execute as a list

        Returns:
            Returns command to execute on the system as a list object
        """

        return self._command

    def run(self):
        try:
            open(os.path.join(self._log_dir, self.get_stdout_name()), 'w', 0).write(self.get_command())
        except:
            pass

        super(ScriptCheckProcess, self).run()

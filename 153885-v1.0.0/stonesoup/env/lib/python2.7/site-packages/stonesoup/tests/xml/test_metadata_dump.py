import sys
from stonesoup.metadata import *
from stonesoup.tests.resources import xml
from pprint import pformat
from nose.tools import assert_equal, assert_is_not_none, assert_in

def get_testcase():
    path =  xml.get_file("api_metadata.xml")
    return TestCase.load_xml(path)

def test_dump_testcase():
    print >> sys.stderr, sys._getframe().f_code.co_name
    testcase = get_testcase()

    testcase_dict = testcase.dump_dict()

    assert_is_not_none(testcase_dict)

    print pformat(testcase_dict)


def test_testcase_dict_toplevel():
    print >> sys.stderr, sys._getframe().f_code.co_name
    testcase = get_testcase()
    testcase_dict = testcase.dump_dict()

    assert_equal(testcase.name, testcase_dict['name'])
    assert_equal(testcase.language,
                 LanguageType[testcase_dict['language']])
    assert_equal(testcase.base_program, testcase_dict['base_program'])
    assert_equal(testcase.description, testcase_dict['description'])
    assert_equal(testcase.targeted_architecture,
                 ArchitectureType[testcase_dict['targeted_architecture']])
    assert_equal(testcase.targeted_os,
                 OperatingSystemType[testcase_dict['targeted_os']])
    assert_equal(testcase.test_case_type,
                 TestCaseType[testcase_dict['test_case_type']])
    assert_equal(testcase.run_command, testcase_dict['run_command'])

    current_command = 0
    for build_command in testcase.build_commands:
        assert_equal(build_command,
                     testcase_dict['build_commands'][current_command])
        current_command += 1

    assert_equal(testcase.build_ldflags, testcase_dict['build_ldflags'])
    assert_equal(testcase.build_libs, testcase_dict['build_libs'])

    additional_info = testcase_dict['additional_information']
    for key, value in testcase.additional_information.iteritems():
        assert_in(key, additional_info)
        assert_equal(value, additional_info[key])

    resource_limits = testcase_dict['resource_limits']
    for key, value in testcase.resource_limits.iteritems():
        assert_in(key.value, resource_limits)
        assert_equal(value, resource_limits[key.value])
    #we will test these more in depth in another test later.
    assert_is_not_none(testcase_dict['structure'])
    assert_is_not_none(testcase_dict['weakness'])
    assert_is_not_none(testcase_dict['io_pairs'])

def test_testcase_structure():
    print >> sys.stderr, sys._getframe().f_code.co_name

    testcase= get_testcase()
    testcase_dict = testcase.dump_dict()
    structure = testcase.structure
    #we pull from the testcase rather than the structure so that we
    #are confident it had no opportunity to be updated post dump
    structure_dict = testcase_dict['structure']

    assert_equal(structure.source, structure_dict['source'])
    assert_equal(structure.install, structure_dict['install'])
    assert_equal(structure.scripts, structure_dict['scripts'])
    assert_equal(structure.iodata, structure_dict['iodata'])
    assert_equal(structure.scoredata, structure_dict['scoredata'])
    binary_counter = 0
    binaries = structure_dict['binaries']
    for binary in structure.binaries:
        assert_equal(binary.folder, binaries[binary_counter]['folder'])
        assert_equal(binary.architecture,
                     ArchitectureType[binaries[binary_counter]['architecture']])
        binary_counter += 1

def check_code_location(metadata_obj, dict_obj):
    '''Asserts that all values in a CodeLocation object are valid
    and captured correctly. Many objects inherit from CodeLocation'''
    assert_equal(metadata_obj.file_name, dict_obj['file_name'])
    assert_equal(metadata_obj.method_name, dict_obj['method_name'])
    assert_equal(metadata_obj.line_number, dict_obj['line_number'])
    assert_equal(metadata_obj.class_name, dict_obj['class_name'])
    assert_equal(metadata_obj.parameters, dict_obj['parameters'])


def check_code_location_with_description(meta_obj, dict_obj):
    '''Asserts that values in a CodeLocationWithDescription object
    are all valid and captured correctly. '''

    check_code_location(meta_obj, dict_obj)
    assert_equal(meta_obj.description, dict_obj['description'])

def test_testcase_weakness():
    print >> sys.stderr, sys._getframe().f_code.co_name

    testcase = get_testcase()
    testcase_dict = testcase.dump_dict()
    weakness = testcase.weakness
    weakness_dict = testcase_dict['weakness']

    #this test is next
    assert_is_not_none(weakness_dict['variant'])

    assert_equal(weakness.generation_method,
                 GenerationMethodType[weakness_dict['generation_method']])

    #Make sure the injection point was parsed properly.
    injection_point = weakness.injection_point
    injection_dict = weakness_dict['injection_point']

    check_code_location(injection_point, injection_dict)

    #Make sure taint source parsed properly.
    source = weakness.source
    source_dict = weakness_dict['source']

    assert_equal(source.complexity_type,
                 TaintSourceType(source_dict['complexity_type']))

    check_code_location(source, source_dict)
    assert_equal(source.complexity_category,
                 ComplexityCategoryType(source_dict['complexity_category']))

    complexities = weakness.complexities
    complexity_dict = weakness_dict['complexities']
    complexity_counter = 0
    for complexity in complexities:
        complex_item = complexity_dict[complexity_counter]
        complexity_counter += 1

        check_code_location(complexity, complex_item)

        assert_equal(complexity.complexity_category,
                    ComplexityCategoryType(complex_item['complexity_category']))

        if complexity.complexity_category == ComplexityCategoryType.data_flow:
            assert_equal(complexity.complexity_type,
                         DataFlowType[complex_item['complexity_type']])

        elif complexity.complexity_category == ComplexityCategoryType.data_type:
            assert_equal(complexity.complexity_type,
                         DataType[complex_item['complexity_type']])

        elif complexity.complexity_category == \
             ComplexityCategoryType.control_flow:
            assert_equal(complexity.complexity_type,
                         ControlFlowType[complex_item['complexity_type']])

        else:
            assert False

def test_testcase_weakness_variant():
    print >> sys.stderr, sys._getframe().f_code.co_name

    testcase = get_testcase()
    testcase_dict = testcase.dump_dict()

    #pull out the variants.
    variant = testcase.weakness.variant
    variant_dict = testcase_dict['weakness']['variant']

    assert_equal(variant.cwe, variant_dict['cwe'])
    assert_equal(variant.description, variant_dict['description'])
    assert_equal(variant.name, variant_dict['name'])

    check_code_location_with_description(variant.crossover_point,
                                         variant_dict['crossover_point'])

    check_code_location_with_description(variant.interaction_point,
                                         variant_dict['interaction_point'])

    check_code_location_with_description(variant.trigger_point,
                                         variant_dict['trigger_point'])

def check_iopair_toplevel(meta_obj, dict_obj):
    assert_equal(meta_obj.category, IOPairCategoryType[dict_obj['category']])
    assert_equal(meta_obj.name, dict_obj['name'])
    assert_equal(meta_obj.description, dict_obj['description'])
    assert_equal(meta_obj.derived_from, dict_obj['derived_from'])
    assert_equal(meta_obj.default_scoring_formula_id,
                 dict_obj['default_scoring_formula_id'])
    assert_equal(meta_obj.reset, ResetType(dict_obj['reset']))
    assert_equal(meta_obj.run_command_encoding,
                 EncodingType(dict_obj['run_command_encoding']))
    assert_equal(meta_obj.run_command_merge, dict_obj['run_command_merge'])
    assert_equal(meta_obj.timeout, dict_obj['timeout'])
    assert_equal(meta_obj.run_command, dict_obj['run_command'])

    assert_is_not_none(dict_obj['pre_processes'])
    assert_is_not_none(dict_obj['co_processes'])
    assert_is_not_none(dict_obj['post_processes'])
    assert_is_not_none(dict_obj['scoring_checks'])

    for formula in meta_obj.scoring_formulas:
        formula_dict = dict_obj['scoring_formulas']
        assert_in(formula, formula_dict)
        assert_equal(meta_obj.scoring_formulas[formula], formula_dict[formula])

    for limit in meta_obj.resource_limits:
        resource_dict = dict_obj['resource_limits']
        assert_in(limit.value, resource_dict)
        assert_equal(meta_obj.resource_limits[limit],
                     resource_dict[limit.value])

    impact_counter = 0
    impacts = dict_obj['technical_impacts']

    for technical_impact in meta_obj.technical_impacts:
        assert_equal(technical_impact.value, impacts[impact_counter])
        impact_counter += 1

def test_iopair_toplevel():
    print >> sys.stderr, sys._getframe().f_code.co_name

    testcase = get_testcase()
    testcase_dict = testcase.dump_dict()

    io_pairs = testcase.io_pairs
    io_dict = testcase_dict['io_pairs']

    io_counter = 0
    for io_pair in io_pairs:
        check_iopair_toplevel(io_pair, io_dict[io_counter])
        io_counter += 1

def check_simple_value(meta_obj, dict_obj):
    assert_equal(meta_obj.value, dict_obj['value'])
    assert_equal(meta_obj.encoding, EncodingType(dict_obj['encoding']))
    assert_equal(meta_obj.handling, ValueType(dict_obj['handling']))

def check_base_input(meta_obj, dict_obj):
    check_simple_value(meta_obj, dict_obj)
    assert_equal(meta_obj.type, InputType(dict_obj['type']))
    assert_equal(meta_obj.delay_after, dict_obj['delay_after'])
    assert_equal(meta_obj.delay_before, dict_obj['delay_before'])
    assert_equal(meta_obj.id, dict_obj['id'])

def check_database_input(meta_obj, dict_obj):
    check_base_input(meta_obj, dict_obj)
    assert_equal(meta_obj.server, dict_obj['server'])
    assert_equal(meta_obj.port, dict_obj['port'])
    assert_equal(meta_obj.database_name, dict_obj['database_name'])
    assert_equal(meta_obj.database_type,
                 DatabaseType(dict_obj['database_type']))

def check_environment_input(meta_obj, dict_obj):
    check_base_input(meta_obj, dict_obj)
    assert_equal(meta_obj.key, dict_obj['key'])

def check_file_input(meta_obj, dict_obj):
    check_base_input(meta_obj, dict_obj)
    assert_equal(meta_obj.path, dict_obj['path'])

def check_script_input(meta_obj, dict_obj):
    check_base_input(meta_obj, dict_obj)

def check_socket_input(meta_obj, dict_obj):
    check_base_input(meta_obj, dict_obj)
    assert_equal(meta_obj.address, dict_obj['address'])
    assert_equal(meta_obj.port, dict_obj['port'])

def check_input(meta_obj, dict_obj):
    if isinstance(meta_obj, ScriptInput):
        check_script_input(meta_obj, dict_obj)
    elif isinstance(meta_obj, SocketInput):
        check_script_input(meta_obj, dict_obj)
    elif isinstance(meta_obj, EnvironmentVariableInput):
        check_environment_input(meta_obj, dict_obj)
    elif isinstance(meta_obj, FileContentInput):
        check_file_input(meta_obj, dict_obj)
    elif isinstance(meta_obj, DatabaseInput):
        check_database_input(meta_obj, dict_obj)
    else:
        check_base_input(meta_obj, dict_obj)

def check_processes(meta_obj, dict_obj):
    assert_equal(meta_obj.scheme, ExecutionSchemeType(dict_obj['scheme']))

    input_counter = 0
    for input in meta_obj.inputs:
        input_dict = dict_obj['inputs'][input_counter]
        input_counter += 1
        if isinstance(input, BaseInput):
            check_input(input, input_dict)
        elif isinstance(input, ExecutionGroup):
            check_processes(input, input_dict)
        else:
            assert False

def test_pre_processes():
    print >> sys.stderr, sys._getframe().f_code.co_name

    testcase = get_testcase()
    testcase_dict = testcase.dump_dict()

    io_dict = testcase_dict['io_pairs']
    io_counter = 0
    for io_pair in testcase.io_pairs:
        pre_dict = io_dict[io_counter]['pre_processes']
        io_counter += 1
        check_processes(io_pair.pre_processes, pre_dict)

def test_co_processes():
    print >> sys.stderr, sys._getframe().f_code.co_name

    testcase = get_testcase()
    testcase_dict = testcase.dump_dict()

    io_dict = testcase_dict['io_pairs']
    io_counter = 0
    for io_pair in testcase.io_pairs:
        pre_dict = io_dict[io_counter]['co_processes']
        io_counter += 1
        check_processes(io_pair.co_processes, pre_dict)

def test_post_processes():
    print >> sys.stderr, sys._getframe().f_code.co_name

    testcase = get_testcase()
    testcase_dict = testcase.dump_dict()

    io_dict = testcase_dict['io_pairs']
    io_counter = 0
    for io_pair in testcase.io_pairs:
        pre_dict = io_dict[io_counter]['post_processes']
        io_counter += 1
        check_processes(io_pair.post_processes, pre_dict)

def check_output_check(meta_obj, dict_obj):
    assert_equal(meta_obj.name, dict_obj['name'])
    assert_equal(meta_obj.rescorable, dict_obj['rescorable'])

def check_actual(meta_obj, dict_obj):
    assert_equal(meta_obj.value, dict_obj['value'])
    assert_equal(meta_obj.encoding, EncodingType(dict_obj['encoding']))
    assert_equal(meta_obj.output, OutputType(dict_obj['output']))
    assert_equal(meta_obj.input_id, dict_obj['input_id'])

def check_expected(meta_obj, dict_obj):
    check_simple_value(meta_obj, dict_obj)


def check_compare_check(meta_obj, dict_obj):
    check_output_check(meta_obj, dict_obj)
    check_actual(meta_obj.actual, dict_obj['actual'])
    check_expected(meta_obj.expected, dict_obj['expected'])
    assert_equal(meta_obj.check, CompareCheckType(dict_obj['check']))

def check_simple_check(meta_obj, dict_obj):
    check_output_check(meta_obj, dict_obj)
    assert_equal(meta_obj.value, dict_obj['value'])
    assert_equal(meta_obj.encoding, EncodingType(dict_obj['encoding']))
    assert_equal(meta_obj.handling, ValueType(dict_obj['handling']))
    assert_equal(meta_obj.check, SimpleCheckType(dict_obj['check']))

def check_scoring_checks(meta_obj, dict_obj):

    scoring_counter = 0
    for scoring_check in meta_obj:
        if isinstance(scoring_check, CompareOutputCheck):
            check_compare_check(scoring_check, dict_obj[scoring_counter])
            scoring_counter += 1
        elif isinstance(scoring_check, SimpleOutputCheck):
            check_simple_check(scoring_check, dict_obj[scoring_counter])
            scoring_counter += 1
        else:
            check_output_check(scoring_check, dict_obj[scoring_counter])
            scoring_counter += 1



def test_scoring_checks():
    print >> sys.stderr, sys._getframe().f_code.co_name

    testcase = get_testcase()
    testcase_dict = testcase.dump_dict()

    io_dict = testcase_dict['io_pairs']
    io_counter = 0
    for io_pair in testcase.io_pairs:
        check_scoring_checks(io_pair.scoring_checks,
                             io_dict[io_counter]['scoring_checks'])
        io_counter += 1
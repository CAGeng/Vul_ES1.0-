# -----------------------------Copyright-------------------------------------
# NOTICE
#
# This software (or technical data) was produced for the U. S.
# Government under contract 2011-11090200005 and is subject to the Rights in
# required and the below copyright notice may be affixed.
#
# Copyright (c) 2014. All Rights Reserved.
# -----------------------------Copyright--------------------------------------
import os
from os.path import dirname as dirname
import sys
import shutil
import stat
from nose.tools import assert_equal, assert_raises, assert_true
from nose.tools import assert_in, assert_false, with_setup

from stonesoup.utils import reset_scheme
from stonesoup.tests.resources import testcases
from stonesoup.tests.resources import scripts as test_scripts
from stonesoup.utils import workspace
from stonesoup import scripts as non_test_scripts
from stonesoup import tests
from stonesoup.metadata import *
from stonesoup.tests.resources import metadata as test_metadata
from stonesoup.tests.resources import configs
from stonesoup.configuration import configuration

def setup_test_env():
    """Create test directory.
        Args:
            None.
        Returns:
            None.
        Raises:
            None.
    """
    config_path = os.path.dirname(configs.__file__)
    configuration.create('{}/test_reset_no_reboot.conf'.format(config_path))
    global outdir
    outdir = configuration.get_option('DEFAULT', 'texas_rundir')
    global texas_scripts
    texas_scripts = configuration.get_option('execute', 'scripts_dir')
    if not os.path.exists(texas_scripts):
        os.makedirs(texas_scripts)
    global rscheme
    rscheme = reset_scheme.ResetScheme(outdir)
    global mdata_path
    mdata_path = os.path.dirname(test_metadata.__file__)
    # make sure we don't really reboot
    test_scriptsdir = dirname(test_scripts.__file__)
    reboot_sh = os.path.join(test_scriptsdir, 'reboot')
    reboot_test = os.path.join(texas_scripts, 'reboot')
    shutil.copyfile(reboot_sh, reboot_test)
    os.chmod(reboot_test, stat.S_IRWXU | stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IXOTH)
    # Use the dummy reboot command.
    os.environ['PATH'] = '{0}:{1}'.format(texas_scripts, os.environ['PATH'])

def teardown_test_env():
    """Remove all test artifacts.
        Args:
            None.
        Returns:
            None.
        Raises:
            None.
    """
    if os.path.exists(outdir):
        shutil.rmtree(outdir)

@with_setup(setup_test_env(), teardown_test_env())
def test_testcase_skip_check():
    """
    Test test cases can be skipped if they are completed
    """
    print >> sys.stderr, sys._getframe().f_code.co_name

    testcase = TestCase.load_xml('{}/J-TREE-Stdout-reset.xml'.format(
        mdata_path))
    # its not been done, check for false return
    assert_equal(rscheme.testcase_skip_check(testcase.name), False)
    # its been seen but not completed, check for false return
    rscheme.test_cases_tracker[testcase.name] = {'complete': False}
    assert_equal(rscheme.testcase_skip_check(testcase.name), False)
    # its been seen and completed, check for true return
    rscheme.test_cases_tracker[testcase.name] = {'complete': True}
    assert_equal(rscheme.testcase_skip_check(testcase.name), True)

@with_setup(setup_test_env(), teardown_test_env())
def test_complete_iopair_and_testcase():
    print >> sys.stderr, sys._getframe().f_code.co_name

    testcase = TestCase.load_xml('{}/J-TREE-Stdout-reset.xml'.format(
        mdata_path))
    # check testcase complete
    rscheme.test_cases_tracker[testcase.name] = {'iopairs': list(),
                                                 'complete': False}
    rscheme.complete_testcase(testcase.name)
    assert_equal(rscheme.test_cases_tracker[testcase.name]['complete'], True)

@with_setup(setup_test_env, teardown_test_env)
def test_iopair_skip_check():
    """
    Test Io pairs and if we can skip them if they have been completed
    """
    print >> sys.stderr, sys._getframe().f_code.co_name

    testcase = TestCase.load_xml('{}/J-TREE-Stdout-reset.xml'.format(
        mdata_path))
    iopair_list = list()
    iopair_list.extend(testcase.io_pairs)
    # its never been seen, should return false
    assert_equal(rscheme.iopair_skip_check(testcase.name, iopair_list[0]), False)
    # check that testcase is added to tracker
    assert_equal(rscheme.test_cases_tracker.has_key(testcase.name), True)
    # its now been added, make sure it returns false because its not complete
    assert_equal(rscheme.iopair_skip_check(testcase.name, iopair_list[0]), False)
    rscheme.test_cases_tracker[testcase.name]['iopairs'].append(
        iopair_list[0].name)
    # enable skip check
    rscheme.test_cases_tracker[testcase.name]['skip_enabled'] = True
    rscheme.test_cases_tracker['iopair_reset'] = None
    # iopair is complete, verify this
    assert_equal(rscheme.iopair_skip_check(testcase.name, iopair_list[0]), True)

@with_setup(setup_test_env, teardown_test_env)
def test_state_save_and_retrieve():
    """
    Check we can save state though a reboot and load it back in.
    """

    print >> sys.stderr, sys._getframe().f_code.co_name

    testcase = TestCase.load_xml('{}/J-TREE-Stdout-reset.xml'.format(
        mdata_path))
    iopair_list = list()
    iopair_list.extend(testcase.io_pairs)
    rscheme.iopair_skip_check(testcase.name, iopair_list[0])
    check_data = rscheme.test_cases_tracker
    # check file is created
    rscheme.save_state()
    assert_true(os.path.exists('{}/reset_state.pickle'.format(outdir)))

    # check that file is deleted when we load it back in
    rscheme2 = reset_scheme.ResetScheme(outdir)
    rscheme2.load_state()
    assert_false(os.path.exists('{}/reset_state.pickle'.format(outdir)))
    # check that data is same after loading into a new instance
    assert_equal(rscheme2.test_cases_tracker, check_data)

@with_setup(setup_test_env, teardown_test_env)
def test_reboot():
    """
    Test the reboot function, use a test script that doesn't actually reboot the system.
    """
    print >> sys.stderr, sys._getframe().f_code.co_name

    testcase = TestCase.load_xml('{}/J-TREE-Stdout-reset.xml'.format(
        mdata_path))
    iopair_list = list()
    iopair_list.extend(testcase.io_pairs)
    rtn = rscheme.reset_system(iopair_list[0].reset.value,
                               log_dir=outdir, name='test')
    # check command return
    assert_equal(rtn, 0)
    # check stdout
    with open(os.path.join(outdir, 'test-reset_log.stdout')) as f:
        data = f.read()
    assert_equal(data, 'REBOOTING\n')

@with_setup(setup_test_env, teardown_test_env)
def test_reset_bash_generate():
    """
    Test the bash script that will restart texas.
    """
    print >> sys.stderr, sys._getframe().f_code.co_name

    # check the that it tosses an error for invalid reset type
    assert_raises(reset_scheme.ResetSchemeError, rscheme.reset_bash_generate,
                  'none', 'none' )
    # check we can write out a reboot restart bash script
    rscheme.reset_bash_generate('REBOOT', 'echo "hello world"' )
    bash_path = '{}/texas_cron.sh'.format(texas_scripts)
    with open(bash_path, 'r') as f:
        data = f.readlines()
    import pdb
    pdb.set_trace()
    assert_equal(data, ['#!/bin/bash\n',
                        'echo "hello world" --state\n'])
    # test the reprovsion script gets created
    bash_path = '{}/texas_cron.sh'.format(os.path.dirname(
        non_test_scripts.__file__))
    # cleanup
    with open(bash_path, 'w') as f:
        f.write('#!/bin/bash\n# Cron Script Place Holder\n')

    rscheme.reset_bash_generate('REPROVISION', 'test')
    # path = '{}/texas_reprovision.sh'.format(texas_scripts)
    path = '{}/texas_cron.sh'.format(texas_scripts)
    with open(path, 'r') as f:
        data = f.readlines()
    assert_equal(data, ['#!/bin/bash\n', 'echo "reprovision"'])

@with_setup(setup_test_env, teardown_test_env)
def test_reset():
    """
    Test reset functionality
    """
    print >> sys.stderr, sys._getframe().f_code.co_name
    testcase_path = os.path.abspath(os.path.dirname(testcases.__file__))
    workspace.initialize(archive='{}/J-TREE.tar.gz'.format(testcase_path))
    workspace.create()
    testcase = TestCase.load_xml('{}/J-TREE-Stdout-reset.xml'.format(
        mdata_path))
    iopair_list = list()
    iopair_list.extend(testcase.io_pairs)
    cases_tracker = dict()
    # test reset recovery
    cases_tracker[testcase.name] = {'reset': True,
                                    'iopair_reset': iopair_list[0].name}
    rscheme.test_cases_tracker = cases_tracker.copy()
    rscheme.reset(testcase.name, iopair_list[0])
    # we have rebooted, make sure we mark it as such
    assert_equal(rscheme.test_cases_tracker[testcase.name]['reset'], False)
    # trigger a "reboot"
    cases_tracker[testcase.name] = {'reset': False,
                                    'iopair_reset': None}
    rscheme.test_cases_tracker = cases_tracker.copy()
    rscheme.reset(testcase.name, iopair_list[0])
    # check stdout
    with open(os.path.join(workspace.get_log_dir(),
                           'J-TREE-reset_log.stdout')) as f:
        data = f.read()
    assert_equal(data, 'REBOOTING\n')

@with_setup(setup_test_env, teardown_test_env)
def test_reset_bash_clear():
    """
    test that reset clear sets the cron.sh script back to a place holder
    """
    print >> sys.stderr, sys._getframe().f_code.co_name
    # check we can write out a reboot restart bash script
    rscheme.reset_bash_generate('REBOOT', 'echo "hello world"' )
    bash_path = '{}/texas_cron.sh'.format(texas_scripts)
    with open(bash_path, 'r') as f:
        data = f.readlines()
    # check we wrote out
    assert_equal(data, ['#!/bin/bash\n',
                        'echo "hello world" --state\n'])

    # check we can write custom reset for daemon support
    rscheme.reset_bash_clear(daemon=True, bash_str='example')
    with open(bash_path, 'r') as f:
        data = f.readlines()
    assert_equal(data, ['#!/bin/bash\n', 'example'])
    rscheme.reset_bash_clear()
    with open(bash_path, 'r') as f:
        data = f.readlines()
    # Check its back to place holder
    assert_equal(data, ['#!/bin/bash\n', '# Cron Script Place Holder\n'])

